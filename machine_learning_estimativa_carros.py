# -*- coding: utf-8 -*-
"""machine_learning_estimativa_carros

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17kqSyY_88Jn7Hn4gw_-X3QWJ1enSr2n_
"""

!pip install graphviz==0.10
!apt-get install graphviz

import pandas as pd
uri = 'https://gist.githubusercontent.com/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7/car-prices.csv'
dados = pd.read_csv(uri)
dados.head()

mapa = {
     'mileage_per_year': 'milhas_por_ano',
     'model_year': 'ano_do_modelo',
     'price': 'preco',
     'sold': 'vendido'
 }

 dados = dados.rename(columns = mapa)
 dados.head()

troca = {
    'no': 0,
    'yes': 1
}

dados['vendido'] = dados.vendido.map(troca)
dados.head()

#calculando a idade do carro
from datetime import datetime

anoAtual = datetime.today().year
dados['idade_do_modelo'] = anoAtual - dados.ano_do_modelo
dados.head()

#calculando km por ano

dados['km_por_ano'] = dados.milhas_por_ano * 1.60934
dados.head()

#retirando colunas não utilizadas 
dados = dados.drop(columns = ['Unnamed: 0', 'milhas_por_ano', 'ano_do_modelo'], axis=1)
dados.head()

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

x = dados[["preco", "idade_do_modelo", "km_por_ano"]]
y = dados["vendido"]

SEED = 5
np.random.seed(SEED)
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = LinearSVC(dual=False)
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

#calculando a baseline (o minimo de acuracia) utilizando função dummy

from sklearn.dummy import DummyClassifier

dummy_stratified = DummyClassifier()
dummy_stratified.fit(treino_x, treino_y)
acuracia = dummy_stratified.score(teste_x, teste_y) * 100

#acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia de dummy_stratified foi %.2f%%" % acuracia)

#calculando a baseline (o minimo de acuracia) utilizando função dummy

from sklearn.dummy import DummyClassifier

dummy_mostFrequent = DummyClassifier()
dummy_mostFrequent.fit(treino_x, treino_y)
previsoes = dummy_mostFrequent.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia de dummy_mostFrequent foi %.2f%%" % acuracia)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import numpy as np
SEED = 5

#usando o seed do numpy

np.random.seed(SEED)

raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25, stratify = y)
print("treino: ", len(treino_x), "teste: ", len(teste_x))


scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x = scaler.transform(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)

model = SVC()
model.fit(treino_x, treino_y)

previsoes = model.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("acurácia: %.2f%% " % acuracia)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

SEED = 5
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

#max_depth: maximo de profundidade dos niveis da arvore

modelo = DecisionTreeClassifier(max_depth=2)
modelo.fit(raw_treino_x, treino_y)
previsoes = modelo.predict(raw_teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

from sklearn.tree import export_graphviz
import graphviz

features = x.columns

#out_file: exportar para arquivo externo
#filled: separar por cor as decisoes
#features_names: transformar o x[0] com os nomes das colunas do csv
#classes_names: em base da classificação do teste_y -> sim ou não
#gini: decisão sobre quebra de niveis da arvore
#samples: quantos itens passaram por aquele nó de decisao 

dot_data = export_graphviz(modelo, out_file=None,
                           filled = True, rounded = True,
                           feature_names = features,
                          class_names = ["não", "sim"])
grafico = graphviz.Source(dot_data)
grafico